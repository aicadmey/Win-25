# -*- coding: utf-8 -*-
"""Classes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pSk2r3oqJ2sBdVldCbNM3K4SrsgcFhkc

# **10 Examples of Classes**
"""

class Car:
  def __init__(self, brand, model, color, price, speed):
    self.brand = brand
    self.model = model
    self.color = color
    self.price = price
    self.speed = speed

  def start(self):
    print(f"{self.brand} {self.model} is Starting ")

  def brake(self, amount):
    self.speed -= amount
    if self.speed<0:
      self.speed = 0
      print(f"{self.brand} is Slowed Step by Step to {self.speed} Kmh ")

  def accelerate(self, amount):
    self.speed += amount
    print(f"{self.brand} is accelerated to {self.speed} Kmh ")

  def stop(self):
    self.speed = 0
    print(f"{self.brand} is Stopped at {self.speed} Kmh ")

  def display_info(self):
    print(f"Brand: {self.brand} ")
    print(f"Model: {self.model} ")
    print(f"Color: {self.color} ")
    print(f"Price: {self.price} ")
    print(f"Speed: {self.speed} ")

car1=Car("Toyota", "Fortuner", "White", 5000000, 0)
car2=Car("Honda", "Civic", "Black", 4000000, 0)

car1.start()
car1.brake(0)
car1.accelerate(40)
car1.stop()
car1.display_info()

car2.start()
car2.brake(0)
car2.accelerate(60)
car2.stop()
car2.display_info()

class Fruit:
  def __init__(self, name, taste, color, weight):
    self.name = name
    self.taste = taste
    self.color = color
    self.weight = weight

  def check_sweetness(self):
    if self.taste == "Sweet":
      print(f"{self.name} is Sweet ")
    else:
      print(f"{self.name} is not Sweet ")

  def check_weight(self, amount):
    if self.weight>amount:
      print(f"{self.name} is Heavy ")
    else:
      print(f"{self.name} is Lower ")

  def display_info(self):
    print(f"Name: {self.name}")
    print(f"Taste: {self.taste} ")
    print(f"Color: {self.color} ")
    print(f"Weight: {self.weight} grams ")

fruit1=Fruit("Mango", "Sweet", "Yellow", 200)
fruit2=Fruit("Lemon", "Sour", "Green", 50)

fruit1.check_sweetness()
fruit1.check_weight(200)
fruit1.display_info()

fruit2.check_sweetness()
fruit2.check_weight(50)
fruit2.display_info()

class Student:
  def __init__(self, name, roll_number, age, grade):
    self.name = name
    self.roll_number = roll_number
    self.age = age
    self.grade = grade

  def introduce(self):
    print(f"My Name Is {self.name}, I am {self.age} Years Old, My Roll Number is {self.roll_number}, My Grade is {self.grade} ")

  def update_grade(self, new_grade):
    self.grade = new_grade
    print(f"{self.name} Grade Has Updated to {self.grade} ")


student1 = Student("Usman", 1143, 22, "A" )
student2 = Student("Bilal", 1141, 21, "B" )

student1.introduce()
student1.update_grade("A+")

student2.introduce()
student2.update_grade("A")

class Company:
  def __init__(self):
    self.company_name=None
    self.location=None
    self.employees=None
    self.revenue=None

company1 = Company()
company1.company_name = "Future Dynamics"
company1.location = "London"
company1.employees = 300
company1.revenue = "$25"


company2 = Company()
company2.company_name = "Solar Nexus"
company2.location = "Berlin"
company2.employees = 250
company2.revenue = "$30"


print(f"Company 1: {company1.company_name}, Location: {company1.location}, Employees: {company1.employees}, Revenue: {company1.revenue}  ")
print(f"Company 2: {company2.company_name}, Location: {company2.location}, Employees: {company2.employees}, Revenue: {company2.revenue}  ")

class Human:
  def __init__(self):
    self.name = None
    self.age = None
    self.height = None
    self.education = None

human1 = Human()
human1.name = "Usman"
human1.age = 22
human1.height = 188
human1.education = "BS AI"

human2 = Human()
human2.name = "Bilal"
human2.age = 21
human2.height = 200
human2.education = "BS AI"


print(f"Human 1: {human1.name}, Age: {human1.age} Years Old, Height: {human1.height} In Centimeters, Education: {human1.education} ")
print(f"Human 2: {human2.name}. Age: {human2.age} Years Old, Height: {human2.height} In Centimeters, Education: {human2.education} ")

class Mobile_Phone():
  def __init__(self, brand, model, color, price):
    self.brand = brand
    self.model = model
    self.color = color
    self.price = price

  def send_messege(self, number, messege):
    print(f"Sending Messege to {number} with Messege {messege} ")

  def take_photo(self):
    print(f"{self.brand} {self.model} is Taking Photo is Good Filter ")

  def make_call(self, number):
    print(f"Calling {number} to {self.model} ")

  def get_details(self):
    print(f"Brand: {self.brand}, Model: {self.model}, Color: {self.color}, Price: {self.price} ")


phone1 = Mobile_Phone("Samsung", "Galaxy S22 Ultra", "Black", 300000)

phone2 = Mobile_Phone("Apple", "Iphone 14 Pro Max", "White", 225000)

print(phone1.get_details())
phone1.make_call("02264763677")
phone2.send_messege("0338736737", "Hello" )

class Dog:
  def __init__(self, name, breed, color, age):
    self.name = name
    self.breed = breed
    self.color = color
    self.age = age

  def bark(self):
    print(f"{self.name} is Barking. ")

  def eating(self):
    print(f"{self.name} is Eating. ")

dog1 = Dog("Buddy", "Meat", "Yellow", 7)
dog2 = Dog("Max", "Biscuits", "Black", 5)

dog1.bark()
dog1.eating()

dog2.bark()
dog2.eating()

class Animal:
  def __init__(self):
    self.name = None
    self.age = None
    self.color = None
    self.eating = None

animal1 = Animal()
animal1.name = "Buffalow"
animal1.age = 23
animal1.color = "Black"
animal1.eating = "Green Grass"

animal2 = Animal()
animal2.name = "Lion"
animal2.age = 30
animal2.color = "Brown"
animal2.eating = "Meat"

print(f"Animal 1: {animal1.name}, Age: {animal1.age} Years Old, Color: {animal1.color}, Eating: {animal1.eating} ")
print(f"Animal 2: {animal2.name}, Age: {animal2.age} Years Old, Color: {animal2.color}, Eating: {animal2.eating} ")

class Shoes:
  def __init__(self, brand, size, color, material,price):
    self.brand = brand
    self.size = size
    self.color = color
    self.material = material
    self.price = price

  def display_info(self):
    print(f"Brand: {self.brand}, Size: {self.size}, Color: {self.color}, Material: {self.material}, Price: {self.price} ")

  def apply_discount(self, discounted_percentage):
    discounted_price = self.price - (self.price * discounted_percentage / 100 )
    print(f"Discounted Price: {discounted_price} ")

shoe1 = Shoes("Nike", 8, "Black", "Leather", 120)

shoe2 = Shoes("Adidas", 7, "Brown", "Synthetic", 90)

shoe1.display_info()
shoe2.display_info()

shoe1.apply_discount(10)
shoe2.apply_discount(30)

class Civilization:
    def __init__(self, name, era, population, technology_level, capital, economy_type, religion):
        self.name = name
        self.era = era
        self.population = population
        self.technology_level = technology_level
        self.capital = capital
        self.economy_type = economy_type
        self.religion = religion

    def rise_of_civilization(self):
        print(f"{self.name} is rising and expanding in the {self.era} era.")

    def fall_of_civilization(self):
        print(f"{self.name} is declining in the {self.era} era.")

    def trade(self):
        print(f"{self.name} is trading goods and services across its empire.")

    def advance_technology(self):
        print(f"{self.name} is advancing in technology with {self.technology_level} level.")

    def build_monuments(self):
        print(f"{self.name} is building famous monuments in {self.capital}.")


egyptian_civilization = Civilization("Ancient Egypt", "Ancient", 5000000, "Basic", "Thebes", "Agrarian", "Polytheism")
roman_civilization = Civilization("Roman Empire", "Ancient", 60000000, "Advanced", "Rome", "Industrial", "Polytheism")


egyptian_civilization.rise_of_civilization()
roman_civilization.build_monuments()